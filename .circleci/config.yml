# aws cloudformation deploy --template-file cloudfront.yml --stack-name InitialStack --parameter-overrides WorkflowID=mybuket589442666723
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  slack: circleci/slack@4.1
  node: circleci/node@5.1.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    #   # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  
  send-slack-msg:
    executor:
      name: node/default
    steps:
      - run:
          name: "Notifications"
          command: |
            echo $SLACK_DEFAULT_CHANEL
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANEL
          # event: fail
          event: always
          template: basic_fail_1
  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #     keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            node --version
            npm -v
            API_URL="http://localhost:3030"
            echo "API_URL=${API_URL}" >> frontend/.env
            cd frontend
            rm -rf node_modules
            rm -f package-lock.json
             # 👇️ clean npm cache
            npm cache clean --force
            npm install
      - run:
          name: Build
          command: |
            cd frontend
            ls
            npm run build

      # - slack/notify:
      #     channel: $SLACK_DEFAULT_CHANEL
      #     event: fail
      #     template: basic_fail_1
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
            #  exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [test-frontend]
      # Your job code here
      - run:
          name: Test Frontend
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/test]
          key: frontend-test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [test-backend]
      # Your job code here
      - run:
          name: Test Backend
          command: |
            # Your code here
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/test]
          key: backend-test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-frontend]
      # Your job code here
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm install
            # npm run build
            ## npm install oauth-sign@^0.9.0
            ## npm audit fix --audit-level=critical --force
            ## If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            ## npm update minimist --depth
            npm update
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/scan]
          key: frontend-scan

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-backend]
      # Your job code here
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm install
            npm update mkdirp --depth 2
            ## npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            ## If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/scan]
          key: backend-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - run:
          name: Install tar
          command: |
            yum install -y tar gzip
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
            # aws cloudformation deploy \
              # --template-file .circleci/files/backend.yml \
              #--tags project=your-tag \
              # --stack-name "your back-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              # exit 1
      # - run:
      #     name: Ensure front-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         #--tags project=your-tag \
      #         # --stack-name "your front-end stack name with workflow id" \
      #         # --parameter-overrides ID="your workflow id"  
      #         exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      # run:
      #   name: Fetch Public IP
      #   command: |
      #     # Fetch the public IP of the EC2 instance
      #     export PUBLIC_IP=$(aws ec2 describe-instances \
      #       --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #       --query "Reservations[0].Instances[0].PublicIpAddress" \
      #       --output text)
          
      #     # Write the public IP to the Ansible inventory file
      #     # echo "backend ansible_host=${PUBLIC_IP}" >> .circleci/ansible/inventory.txt

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            # Fetch the public IP of the EC2 instance
            # --filters "Name=tag:Name,Values=ansible" \
            export PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[0].Instances[0].PublicIpAddress" \
              --output text)
            # exit 1
            # Write the public IP to the Ansible inventory file
            # echo "backend ansible_host=${PUBLIC_IP}" >> .circleci/ansible/inventory.txt
            echo "${PUBLIC_IP}" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            pwd

      - persist_to_workspace:
          root: ~/
          #root: workspace
          paths:
            - project/.circleci/ansible/inventory.txt
            # - project/.circleci/*
            
      # Here's where you will add some code to rollback on failure      
      - destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
      #- image: python:3.8-alpine
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: 
            - "f9:4c:9e:c3:f0:b3:f4:a5:e8:e1:1f:bf:eb:ce:73:9c" # You can get this ID in the section where you registered the SSH Key
      # attach workspace
      - attach_workspace:
          #at: .
          # at: /tmp/project/.circleci
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pwd
            cat .circleci/ansible/inventory.txt
            # Your code here
            apk add --update tar 
            apk add --update gzip
            apk add curl
            # apk add openssl-dev
            # curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle-1.16.312.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            /usr/local/bin/python3.7 awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            aws --version
            apk add --update ansible 
            # openssh
            # ssh -o StrictHostKeyChecking=no ubuntu@18.206.205.197
            # cd ..
            # exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            # pwd
            # cat /root/project/.circleci/ansible/inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
            # exit 1
          # no_output_timeout: 30m
      # Here's where you will add some code to rollback on failure  
      - destroy-environment    

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
      # - image: node:alpine
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            ## Run and save the migration output
            npm run migrations > migrations_dump.txt
            echo "hello world START"
            cat migrations_dump.txt
            echo "hello world END"

      # - run:
      #     name: Send migration results to memstash
      #     command: |
      #       # Your code here
      #       exit 1

      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
            cd backend
            if grep -q "has been executed successfully." ./migrations_dump.txt
            then
              # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
              # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              # If you are using kvdb.io, generate the bucket ID "GSfdWwHzAodZbMHwt62edt" in your local terminal first
              curl --insecure https://kvdb.io/GSfdWwHzAodZbMHwt62edt/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
              curl --insecure https://kvdb.io/GSfdWwHzAodZbMHwt62edt/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi


    #  Here's where you will add some code to rollback on failure      
      - destroy-environment   

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      # Python, Ansible, Node, NPM, and AWS CLI
      - run:
          name: Install dependencies 
          command: |
            # your code here
            # yum -y install epel-release
            # yum -y update
            yum install gcc openssl-devel bzip2-devel libffi-devel gzip make -y tar unzip
      - run:
          name: Install dependencies Python
          command: |
            # your code here
            # wget https://www.python.org/ftp/python/3.7.11/Python-3.7.11.tgz  
            curl "https://www.python.org/ftp/python/3.7.11/Python-3.7.11.tgz" -o "Python-3.7.11.tgz"
            tar xzf Python-3.7.11.tgz
            cd Python-3.7.11 
            ./configure --enable-optimizations 
            make altinstall 
            cd ..
            rm Python-3.7.11.tgz 
            # alias python="/usr/bin/python3.7"
            # ln -fs /usr/bin/python3.7 /usr/bin/python
            python -V
            python3.7 -V
      - run:
          name: Install dependencies Ansible
          command: |
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3.7 get-pip.py --user
            python3.7 -m pip install --user ansible
      - run:
          name: Install dependencies Node
          command: |
            yum update
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum install nodejs -y
            node --version
            npm -v
      - run:
          name: Install dependencies Awscli
          command: |
            python3.7 -m pip install awscli
            aws --version
      - run:
          name: Get backend url
          command: |
              BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
                           
              API_URL="http://${BACKEND_IP}:3030"

              echo "API_URL=${API_URL}" >> frontend/.env
              cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      #       export API_URL="http://${BACKEND_IP}:3030"
      #       echo "${API_URL}"

      # - run:
      #     name: Deploy frontend objects
      #     command: |
            # your code here
      # Here's where you will add some code to rollback on failure   
      - destroy-environment  
                    
  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
      # Here's where you will add some code to rollback on failure  

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
      # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            
workflows:

  default:
    jobs:
      # FOR DEBUG JOB
      - build-frontend

      # - send-slack-msg:
      #     context:
      #       - slack-secret
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     # filters:
      #     #   branches:
      #     #     only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
